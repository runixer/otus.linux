#Upgrade bastion first
- hosts: bastion
  become: yes
  roles:
    - { role: tune_all, tags: [tune_all] }
#    - { role: upgrade, tags: [upgrade] }

- hosts: all:!bastion
  become: yes
  roles:
    - { role: tune_all, tags: [tune_all] }
#    - { role: upgrade, tags: [upgrade] }

- hosts: log
  become: yes
  vars:
    zookeeper_nodes: "{{ groups['log'] | map('extract', hostvars, ['ansible_host']) | flatten }}"
    kafka_nodes: "{{ groups['log'] | map('extract', hostvars, ['inventory_hostname']) | flatten }}"
    elastic_nodes: "{{ groups['log'] | map('extract', hostvars, ['inventory_hostname']) | flatten }}"
    elastic_user: { username: "elastic", password: "changeMe" }
    elastic_port_api: 9200
    kibana_system_user: { username: "kibana_system", password: "changeMe" }
    logstash_system_user: { username: "logstash_system", password: "changeMe" }
    logstash_internal_user: { username: "logstash_internal", password: "changeMe" }
    logstash_admin_user: { username: "logstash_admin", password: "changeMe" }
    # Consul
    consul_nodes: "{{ groups['log'] | map('extract', hostvars, ['inventory_hostname']) | flatten }}"
    consul_server: true
    consul_services: ["kafkaui", "kibana"]
  roles:
    - { role: oraclejdk, tags: [oraclejdk] }
    - { role: tls_private, tags: [tls_private] }
    - { role: elasticsearch, tags: [elasticsearch] }
    - { role: kibana, tags: [kibana] }
    - { role: zookeeper, tags: [zookeeper] }
    - { role: kafka, tags: [kafka] }
    - { role: logstash, tags: [logstash] }
    - { role: kafkaui, tags: [kafkaui] }
    - { role: consul, tags: [consul]}

- hosts: db
  become: yes
  vars:
    # For consul
    consul_nodes: "{{ groups['log'] | map('extract', hostvars, ['inventory_hostname']) | flatten }}"
    consul_server: false
  roles:
    - { role: innodb_cluster, tags: [db] }
    - { role: consul, tags: [consul_client] }

- hosts: app
  become: yes
  vars:
    wp_files_owner: apache
    wp_files_group: apache
    mysqlrouter_bootstrap_server_url: "{{ innodb_cluster_user_name }}:{{ innodb_cluster_user_password }}@{{ groups['db'][0] }}"
    wp_db_host: "localhost:{{ mysqlrouter_socket }}"
    wp_log_location: /var/log/wordpress.log
    # For vector
    kafka_nodes: "{{ groups['log'] | map('extract', hostvars, ['ansible_host']) | flatten }}"
    # For consul
    consul_nodes: "{{ groups['log'] | map('extract', hostvars, ['inventory_hostname']) | flatten }}"
    consul_server: false
    consul_services: ["wordpress"]
  roles:
    - { role: vector, tags: [vector], when: "(groups['log'] | length) > 0" }
    - { role: php_fpm, tags: [php_fpm] }
    - { role: wordpress, tags: [wordpress] }
    - { role: mysql_router, tags: [mysql_router] }
    - { role: consul, tags: [consul_client] }

# Create wordpress database
- hosts: app[0]
  become: yes
  vars:
    mysql_socket: "{{ mysqlrouter_socket }}"
    mysql_username: "{{ innodb_cluster_user_name }}"
    mysql_password: "{{ innodb_cluster_user_password }}"
  roles:
    - wordpress_mysqldb

- hosts: nginx
  become: yes
  vars:
    wp_files_owner: nobody
    wp_files_group: nobody
    # Upstreams
    upstreams: "{{ groups['app'] | map('extract', hostvars, ['inventory_hostname']) | flatten }}"
    kibana_nodes: "{{ groups['log'] | map('extract', hostvars, ['inventory_hostname']) | flatten }}"
    kafkaui_nodes: "{{ groups['log'] | map('extract', hostvars, ['inventory_hostname']) | flatten }}"
    consului_nodes: "{{ groups['log'] | map('extract', hostvars, ['inventory_hostname']) | flatten }}"
    # For vector
    kafka_nodes: "{{ groups['log'] | map('extract', hostvars, ['inventory_hostname']) | flatten }}"
    # For consul
    consul_nodes: "{{ groups['log'] | map('extract', hostvars, ['inventory_hostname']) | flatten }}"
    consul_server: false
    consul_services: ["nginx"]
  roles:
    - { role: vector, tags: [vector], when: "(groups['log'] | length) > 0" }
    - { role: nginx, tags: [nginx] }
    - { role: wordpress, tags: [wordpress] }
    - { role: consul, tags: [consul_client] }
