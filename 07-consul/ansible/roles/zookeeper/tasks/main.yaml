- name: Create zookeeper group
  ansible.builtin.group:
    name: "{{ zookeeper_group }}"
    state: present

- name: Create zookeeper user
  ansible.builtin.user:
    name: "{{ zookeeper_user }}"
    group: "{{ zookeeper_group }}"
    home: "{{ zookeeper_data_dir }}"
    shell: /sbin/nologin
    comment: Apache ZooKeeper
    state: present
    createhome: no

- name: Check if ZooKeeper has already been downloaded and unpacked
  ansible.builtin.stat:
    path: "{{ zookeeper_install_dir }}"
  register: dir

- name: Download Apache ZooKeeper
  ansible.builtin.get_url:
    url: "{{ zookeeper_mirror }}/zookeeper-{{ zookeeper_version }}/{{ zookeeper_package }}"
    dest: /tmp
  when: not dir.stat.exists

- name: Create ZooKeeper installation dir {{ zookeeper_install_dir }}
  ansible.builtin.file:
    path: "{{ zookeeper_install_dir }}"
    state: directory
    group: root
    owner: root
    mode: 0755
  when: not dir.stat.exists

- name: Unpack Apache ZooKeeper
  ansible.builtin.unarchive:
    src: /tmp/{{ zookeeper_package }}
    dest: "{{ zookeeper_install_dir }}"
    copy: no
    extra_opts: [--strip-components=1]
    exclude:
      - bin/*.cmd
      - bin/README.txt
    group: root
    owner: root
  when: not dir.stat.exists

- name: Create symlink to ZooKeeper installation
  ansible.builtin.file:
    src: "{{ zookeeper_install_dir }}"
    dest: "{{ zookeeper_dir }}"
    state: link
    group: root
    owner: root

- name: Create directory for transaction log files, snapshot files and myid file
  ansible.builtin.file:
    path: "{{ zookeeper_data_dir }}"
    state: directory
    group: "{{ zookeeper_group }}"
    owner: "{{ zookeeper_user }}"
    mode: 0755

- name: Create directory for log files
  ansible.builtin.file:
    path: "{{ zookeeper_log_dir }}"
    state: directory
    group: "{{ zookeeper_group }}"
    owner: "{{ zookeeper_user }}"
    mode: 0755

- name: Create conf dir symlink to /etc
  ansible.builtin.file:
    src: "{{ zookeeper_dir }}/conf"
    dest: "{{ zookeeper_config_dir }}"
    state: link
    group: root
    owner: root

- name: Create zookeeper config file from template
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: zookeeper
    mode: '0640'
    setype: etc_t
  notify:
    - restart zookeeper
  with_items:
    - { src: zookeeper.cfg.j2, dest: "{{ zookeeper_config_dir }}/{{ zookeeper_config_file }}"}
    - { src: log4j.properties.j2, dest: "/etc/zookeeper/log4j.properties"}

- name: Create zookeeper systemd service file from template
  ansible.builtin.template:
    src: zookeeper.service.j2
    dest: /etc/systemd/system/zookeeper.service
    owner: root
    group: root
    mode: '0644'
    setype: systemd_unit_file_t
  notify:
    - restart zookeeper

- name: Create zookeeper myid file
  ansible.builtin.copy:
    content: "{{ play_hosts.index(inventory_hostname) }}"
    dest: "{{ zookeeper_data_dir }}/myid"
    owner: root
    group: zookeeper
    mode: '0640'
    setype: var_lib_t
  notify:
    - restart zookeeper

- name: Create zookeeper profile file with variables
  ansible.builtin.template:
    src: profile.sh.j2
    dest: "/etc/profile.d/zookeeper.sh"
    owner: root
    group: root
    mode: '0644'

- name: Enable zookeeper systemd service
  ansible.builtin.systemd:
    name: zookeeper.service
    state: started
    daemon_reload: yes
    enabled: yes
